<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sansui&#39;s Nest</title>
  
  
  <link href="https://sansui233.github.io/atom.xml" rel="self"/>
  
  <link href="https://sansui233.github.io/"/>
  <updated>2021-05-25T08:17:46.349Z</updated>
  <id>https://sansui233.github.io/</id>
  
  <author>
    <name>Sansui</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>闲聊总结 - 监控服务器的内存占用与稳定性</title>
    <link href="https://sansui233.github.io/2021/05/25/%E9%97%B2%E8%81%8A%E6%80%BB%E7%BB%93-%E7%9B%91%E6%8E%A7%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%86%85%E5%AD%98%E5%8D%A0%E7%94%A8%E4%B8%8E%E7%A8%B3%E5%AE%9A%E6%80%A7/"/>
    <id>https://sansui233.github.io/2021/05/25/%E9%97%B2%E8%81%8A%E6%80%BB%E7%BB%93-%E7%9B%91%E6%8E%A7%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%86%85%E5%AD%98%E5%8D%A0%E7%94%A8%E4%B8%8E%E7%A8%B3%E5%AE%9A%E6%80%A7/</id>
    <published>2021-05-25T08:07:23.000Z</published>
    <updated>2021-05-25T08:17:46.349Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这一系列不是教程，是闲聊经验总结，备份一下走过的经验，防止日后忘了想不起来</p></blockquote><p>最近的有一些刁钻的问题，比如说“如果 Golang 程序因为内存过大被 OOM(Out Of Memory Killer) kill了，怎么在被 kill 之前报错再结束运行”。大概意思是，正常错误退出是会显示 panic 信息的，但如果是内存占用过大而被系统强制退出，要怎么强制退出前显示一些信息？</p><p>汗……我的第一反应是，服务器不装内存监控的吗，运维天天接报警电话觉都睡不好，等不要爆内存就需要处理了。这也是比较常见的处理方式，要是等爆内存再处理那就晚了。</p><p>但技术人员面试一般只考虑技术问题而不是业务问题，那我也还是从技术角度思考一下吧。(尽管我打心底觉得思考技术实现或者做研究前需要先思考哲学上的逻辑可行性，比如我觉得C-S隐私问题必需可信的第三方公证才是彻底的，这是个哲学和社会问题，只靠技术无法解决，世界是守恒的有舍有得，本地差分隐私哲学上说就是伪命题，但之前的师兄非要硬杠没有第三公证的方案……可能是为了生活吧）</p><h2 id="1-想法-检测系统的kill信号值"><a href="#1-想法-检测系统的kill信号值" class="headerlink" title="1. (想法) 检测系统的kill信号值"></a>1. (想法) 检测系统的kill信号值</h2><p>参考：<a href="https://zhuanlan.zhihu.com/p/128953024">Golang之信号处理</a></p><p>思路： Linux 杀程序时会发送一些信号给程序，比如 SIGTERM 与 SIGKILL，可以用一个协程接收这些来自系统的结束信号，并做最终的处理。代码参考上面的链接。</p><p>但要注意的是，SIGKILL 是无法被捕获的。SIGKILL 就是最常用的 kill -9，强制退出。是这个信号的话毫无办法。没有一个程序可以知道什么时候会接收到 SIGKILL。</p><p><img src="https://raw.githubusercontent.com/NamiLing/upic/master/uPic/TG8Vle.png" alt="Linux signals"></p><p>如果非让你处理 SIGKILL，<strong>那他就是想为难你</strong>。</p><p>而 Linux OOM(Out Of Memory Killer) 就是发送的 SIGKILL。所以，没办法的，好好做好服务器的监控吧，这才是正常思路。</p><p>网上找到一个问题，恰好就是这个需求。结论是不可能，好好做监控：<a href="https://unix.stackexchange.com/questions/172559/receive-signal-before-process-is-being-killed-by-oom-killer-cgroups">receive signal before process is being killed by OOM killer / cgroups</a></p><h2 id="2-做好内存监控和报警"><a href="#2-做好内存监控和报警" class="headerlink" title="2. 做好内存监控和报警"></a>2. 做好内存监控和报警</h2><p>监控的面板有不少。我个人服务器之前用过的是 <a href="https://www.netdata.cloud/">netdata</a>，开源的，实时监控，常见的服务都配置好了，基本算是零配置，自己的服务再配置一下自己的进程组就好了。报警的话绑定一下邮箱就能报警。</p><p>然后Web服务就用在线的 uptime robot 凑合一下，挺好用的，挂掉了发邮件。不好的地方不能监控特定路径(还是说要收费？忘了)。</p><p>宝塔一直没用过，可能感觉功能太多占地方。个人比较喜欢用什么再下什么，迁移服务器自己有写安装脚本，现在还有Docker。实在有太多的服务的话再用集成的工具。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;这一系列不是教程，是闲聊经验总结，备份一下走过的经验，防止日后忘了想不起来&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最近的有一些刁钻的问题，比如说“如果 Golang 程序因为内存过大被 OOM(Out Of Memory Killer) kil</summary>
      
    
    
    
    <category term="折腾" scheme="https://sansui233.github.io/categories/%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="Golang" scheme="https://sansui233.github.io/tags/Golang/"/>
    
    <category term="运维" scheme="https://sansui233.github.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
    <category term="Linux" scheme="https://sansui233.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>闲聊总结 - nginx实践</title>
    <link href="https://sansui233.github.io/2021/05/25/%E9%97%B2%E8%81%8A%E6%80%BB%E7%BB%93-nginx%E5%AE%9E%E8%B7%B5/"/>
    <id>https://sansui233.github.io/2021/05/25/%E9%97%B2%E8%81%8A%E6%80%BB%E7%BB%93-nginx%E5%AE%9E%E8%B7%B5/</id>
    <published>2021-05-25T08:02:09.000Z</published>
    <updated>2021-05-25T08:17:39.026Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这一系列不是教程，是闲聊经验总结，备份一下走过的经验，防止日后忘了想不起来</p></blockquote><h2 id="之前用-nginx-主要是做了以下三件事情"><a href="#之前用-nginx-主要是做了以下三件事情" class="headerlink" title="之前用 nginx 主要是做了以下三件事情"></a>之前用 nginx 主要是做了以下三件事情</h2><ol><li>反代本地端口</li><li>配置SSL</li><li>“装死”<h3 id="1-反代本地端口"><a href="#1-反代本地端口" class="headerlink" title="1. 反代本地端口"></a>1. 反代本地端口</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    location / &#123;</span><br><span class="line">            proxy_pass http://127.0.0.1:19999/; #netdata 默认</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-配置SSL"><a href="#2-配置SSL" class="headerlink" title="2. 配置SSL"></a>2. 配置SSL</h3>直接用的cerbot，nginx配置里只写了公钥和私钥，其他配置在options-ssl-nginx.conf里。以后需要用到别的再查。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen [::]:443 ssl ipv6only=on;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    ssl_certificate /etc/letsencrypt/live/domain.com/fullchain.pem;</span><br><span class="line">    ssl_certificate_key /etc/letsencrypt/live/domain.com/privkey.pem;</span><br><span class="line">    include /etc/letsencrypt/options-ssl-nginx.conf;</span><br><span class="line">    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-“装死”"><a href="#3-“装死”" class="headerlink" title="3. “装死”"></a>3. “装死”</h3>443和80端口不用了，不要返回任何值<h4 id="nginx-让不匹配的页面装死无响应-Linux"><a href="#nginx-让不匹配的页面装死无响应-Linux" class="headerlink" title="nginx 让不匹配的页面装死无响应 #Linux"></a>nginx 让不匹配的页面装死无响应 #Linux</h4>直接在根目录下 return 0 就行了。由于是贪心匹配，后续设置的链接自然会有效，没有设置的链接都在根目录下。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;这一系列不是教程，是闲聊经验总结，备份一下走过的经验，防止日后忘了想不起来&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;之前用-nginx-主要是做了以下三件事情&quot;&gt;&lt;a href=&quot;#之前用-nginx-主要是做了以下三件事情&quot; clas</summary>
      
    
    
    
    <category term="折腾" scheme="https://sansui233.github.io/categories/%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="nginx" scheme="https://sansui233.github.io/tags/nginx/"/>
    
    <category term="web" scheme="https://sansui233.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>闲聊总结 - 防火墙与CDN实践</title>
    <link href="https://sansui233.github.io/2021/05/25/%E9%97%B2%E8%81%8A%E6%80%BB%E7%BB%93-%E9%98%B2%E7%81%AB%E5%A2%99%E4%B8%8ECDN%E5%AE%9E%E8%B7%B5/"/>
    <id>https://sansui233.github.io/2021/05/25/%E9%97%B2%E8%81%8A%E6%80%BB%E7%BB%93-%E9%98%B2%E7%81%AB%E5%A2%99%E4%B8%8ECDN%E5%AE%9E%E8%B7%B5/</id>
    <published>2021-05-25T07:57:46.000Z</published>
    <updated>2021-05-25T08:17:43.376Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这一系列不是教程，是闲聊经验总结，备份一下走过的经验，防止日后忘了想不起来</p></blockquote><h2 id="iptables-的防火墙实践"><a href="#iptables-的防火墙实践" class="headerlink" title="iptables 的防火墙实践"></a>iptables 的防火墙实践</h2><p>需求：开放需要的端口，其他的全部拒绝</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">:INPUT ACCEPT [778:1961067]</span><br><span class="line">:FORWARD ACCEPT [0:0]</span><br><span class="line">:OUTPUT ACCEPT [1966:4038735]</span><br><span class="line"></span><br><span class="line">-A INPUT -s 127.0.0.1 -d 127.0.0.1 -j ACCEPT</span><br><span class="line">-A OUTPUT -j ACCEPT</span><br><span class="line"># Allow all loopback (lo0) traffic and reject traffic</span><br><span class="line"># to localhost that does not originate from lo0.</span><br><span class="line">-A INPUT -i lo -j ACCEPT</span><br><span class="line">-A INPUT ! -i lo -s 127.0.0.0/8 -j REJECT</span><br><span class="line"></span><br><span class="line"># Allow ping.</span><br><span class="line">-A INPUT -p icmp --icmp-type 8 -j ACCEPT</span><br><span class="line"></span><br><span class="line">-A INPUT -p tcp --dport 22 -j ACCEPT    #允许访问22端口</span><br><span class="line">-A INPUT -p tcp --dport 80 -j ACCEPT    #允许访问80端口</span><br><span class="line">-A INPUT -p tcp --dport 443 -j ACCEPT    #允许访问443端口</span><br><span class="line">-A INPUT -p tcp -m multiport --dports 80,443 -s $ip -j ACCEPT #cloudflare白名单</span><br><span class="line"></span><br><span class="line"># Allow some local port</span><br><span class="line">-A INPUT -s 127.0.0.1/32 -p tcp -m tcp --dport 6060 -j ACCEPT</span><br><span class="line">-A INPUT -p tcp -m tcp --dport 6060 -j DROP</span><br><span class="line"></span><br><span class="line"># Keep established connection. This includes ICMP error returns.</span><br><span class="line">-A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT</span><br><span class="line"></span><br><span class="line"># Ban nmap</span><br><span class="line">-A INPUT -p tcp -m tcp --tcp-flags FIN,SYN,RST,PSH,ACK,URG FIN,PSH,URG -j REJECT --reject-with icmp-port-unreachable</span><br><span class="line">-A INPUT -p tcp -m tcp --tcp-flags SYN,RST SYN,RST -j REJECT --reject-with icmp-port-unreachable</span><br><span class="line">-A INPUT -p tcp -m tcp --tcp-flags FIN,SYN FIN,SYN -j REJECT --reject-with icmp-port-unreachable</span><br><span class="line"></span><br><span class="line"># Reject all other inbound.</span><br><span class="line">iptables -A INPUT -j REJECT</span><br><span class="line">hable</span><br><span class="line"></span><br><span class="line"># Reject all other inbound.</span><br><span class="line">iptables -A INPUT -j REJECT</span><br><span class="line">COMMIT</span><br></pre></td></tr></table></figure><p>开机生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> vim /etc/network/interfaces</span></span><br><span class="line">pre-up iptables-restore &lt; /etc/network/iptables.up.rules</span><br></pre></td></tr></table></figure><h2 id="CDN-实践"><a href="#CDN-实践" class="headerlink" title="CDN 实践"></a>CDN 实践</h2><p>使用的是 Cloudflare的CDN。操作上很简单，把域名的nameserver转移到cloudflare就行了。然后设置 Firewall，就能在CDN那里防止通过域名恶意访问服务器了。</p><p>之前有写过关于动态更新 Cloudflare 防火墙规则的：<a href="https://sansui233.github.io/2020/12/12/%E5%8F%97%E4%B8%8D%E4%BA%86%E4%BA%86%EF%BC%8C%E5%86%B3%E5%AE%9A%E7%9C%8B%E7%9C%8B%E6%98%AF%E8%B0%81%E5%9C%A8D%E6%88%91/">受不了了，决定看看是谁在D我</a>。源码在私有仓库中未公开(因为这不是个很通用的程序)，实现起来也很简单，弄清 Cloudflare 的 api 就行。</p><p>不过动态更新规则的程序开始的时候出现过一个问题，就是CDN的防火墙把CloudFlare的IP也ban了，我说怎么用着用着就访问不了了……后来在程序里给CF加了白名单就OK了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;这一系列不是教程，是闲聊经验总结，备份一下走过的经验，防止日后忘了想不起来&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;iptables-的防火墙实践&quot;&gt;&lt;a href=&quot;#iptables-的防火墙实践&quot; class=&quot;headerlin</summary>
      
    
    
    
    <category term="折腾" scheme="https://sansui233.github.io/categories/%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="运维" scheme="https://sansui233.github.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
    <category term="Linux" scheme="https://sansui233.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>闲聊总结 - github-action 自动化构建实践经验</title>
    <link href="https://sansui233.github.io/2021/05/25/%E9%97%B2%E8%81%8A%E6%80%BB%E7%BB%93-github-action-%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA%E5%AE%9E%E8%B7%B5%E7%BB%8F%E9%AA%8C/"/>
    <id>https://sansui233.github.io/2021/05/25/%E9%97%B2%E8%81%8A%E6%80%BB%E7%BB%93-github-action-%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA%E5%AE%9E%E8%B7%B5%E7%BB%8F%E9%AA%8C/</id>
    <published>2021-05-25T07:52:59.000Z</published>
    <updated>2021-05-25T08:17:36.408Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这一系列不是教程，是闲聊经验总结，备份一下走过的经验，防止日后忘了想不起来</p></blockquote><p>我是第一次接触 CI/CD (continuous integration / continuous delivery) 的概念，不知道应该怎么翻译比较好，用人话讲就是自动化流程吧。不过也不太一样，自动化是一个比较宽泛的概念，一些的程序都是自动化。</p><p>我在此用到的主要也是continuous delivery。需求是发布版本时自动构建并自动上传到 dockerhub 和 ghcr(Github Container Registry)。</p><h2 id="文档和Actions市场"><a href="#文档和Actions市场" class="headerlink" title="文档和Actions市场"></a>文档和Actions市场</h2><ul><li><a href="https://docs.github.com/en/actions">https://docs.github.com/en/actions</a></li><li><a href="https://github.com/marketplace">https://github.com/marketplace</a><h2 id="1-自动构建流程job"><a href="#1-自动构建流程job" class="headerlink" title="1. 自动构建流程job"></a>1. 自动构建流程job</h2>文件太长了，挑重点记一下。</li><li>actions/setup-go: 初始化Go环境</li><li>actions/checkout: 结算代码。按原文的话说：<blockquote><p>This action checks-out your repository under $GITHUB_WORKSPACE, so your workflow can access it.</p></blockquote></li><li>actions/cache: See “<a href="https://docs.github.com/en/actions/guides/caching-dependencies-to-speed-up-workflows">Caching dependencies to speed up workflows</a>“</li><li>测试、打包文件、make和在终端一样run命令就行</li><li>softprops/action-gh-release：上传二进制到github release，需要用到仓库的secrets</li><li>actions/upload-artifact: 把这个流程生成的文件给别的 CICD job 使用(比如docker)<h2 id="2-Docker构建和上传到ghcr和dockerhub-job"><a href="#2-Docker构建和上传到ghcr和dockerhub-job" class="headerlink" title="2. Docker构建和上传到ghcr和dockerhub job"></a>2. Docker构建和上传到ghcr和dockerhub job</h2>dockerhub不需要github actions，在网页上会自动监测分支更新情况。这个job是上传的ghcr。当时查了很多资料每一步在干什么，不过现在好像又忘得差不多了，不一定准确</li><li>docker/setup-qemu-action：给docker添加multiarch构建的支持？</li><li>docker/setup-buildx-action: 初始化docker的构建工具</li><li>actions/checkout 同上，不重复</li><li>docker/login-action 登录ghcr，需要用到仓库的secrets</li><li>docker/build-push-action 构建和上传<h2 id="3-更新依赖job"><a href="#3-更新依赖job" class="headerlink" title="3. 更新依赖job"></a>3. 更新依赖job</h2>使用 <a href="https://dependabot.com/">Dependabot</a> 可以在 github 的 pull-request 中提醒你更新项目使用的依赖。好像是要先去网站绑定一下仓库，然后仓库中添加github-actions， 添加要监控的依赖。<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">updates:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">package-ecosystem:</span> <span class="string">&quot;github-actions&quot;</span></span><br><span class="line">    <span class="attr">directory:</span> <span class="string">&quot;/&quot;</span></span><br><span class="line">    <span class="attr">schedule:</span></span><br><span class="line">      <span class="attr">interval:</span> <span class="string">&quot;daily&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">package-ecosystem:</span> <span class="string">&quot;docker&quot;</span></span><br><span class="line">    <span class="attr">directory:</span> <span class="string">&quot;/&quot;</span></span><br><span class="line">    <span class="attr">schedule:</span></span><br><span class="line">      <span class="attr">interval:</span> <span class="string">&quot;daily&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">package-ecosystem:</span> <span class="string">&quot;gomod&quot;</span></span><br><span class="line">    <span class="attr">directory:</span> <span class="string">&quot;/&quot;</span></span><br><span class="line">    <span class="attr">schedule:</span></span><br><span class="line">      <span class="attr">interval:</span> <span class="string">&quot;daily&quot;</span></span><br><span class="line">    <span class="attr">open-pull-requests-limit:</span> <span class="number">10</span></span><br></pre></td></tr></table></figure><h2 id="4-清理长期没动过的issue-job"><a href="#4-清理长期没动过的issue-job" class="headerlink" title="4. 清理长期没动过的issue job"></a>4. 清理长期没动过的issue job</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Mark</span> <span class="string">stale</span> <span class="string">issues</span> <span class="string">and</span> <span class="string">pull</span> <span class="string">requests</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">schedule:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">cron:</span> <span class="string">&quot;30 1 * * *&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">stale:</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/stale@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">repo-token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">stale-issue-message:</span> <span class="string">&#x27;This issue is stale because it has been open 60 days with no activity. Remove stale label or comment or this will be closed in 5 days&#x27;</span></span><br><span class="line">          <span class="attr">exempt-issue-labels:</span> <span class="string">&#x27;enhancement,bug,other,documentation,good first issue,help wanted,invalid&#x27;</span></span><br><span class="line">          <span class="attr">days-before-stale:</span> <span class="number">60</span></span><br><span class="line">          <span class="attr">days-before-close:</span> <span class="number">5</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;这一系列不是教程，是闲聊经验总结，备份一下走过的经验，防止日后忘了想不起来&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我是第一次接触 CI/CD (continuous integration / continuous delivery) 的概念，</summary>
      
    
    
    
    <category term="折腾" scheme="https://sansui233.github.io/categories/%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="github" scheme="https://sansui233.github.io/tags/github/"/>
    
    <category term="CI/CD" scheme="https://sansui233.github.io/tags/CI-CD/"/>
    
  </entry>
  
  <entry>
    <title>记一次被骗388巨款的经历</title>
    <link href="https://sansui233.github.io/2021/04/18/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E8%A2%AB%E9%AA%97388%E5%B7%A8%E6%AC%BE%E7%9A%84%E7%BB%8F%E5%8E%86/"/>
    <id>https://sansui233.github.io/2021/04/18/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E8%A2%AB%E9%AA%97388%E5%B7%A8%E6%AC%BE%E7%9A%84%E7%BB%8F%E5%8E%86/</id>
    <published>2021-04-18T13:59:11.000Z</published>
    <updated>2021-04-20T10:01:02.594Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我原本以为是只是一场诱导式的恶意营销，细想来竟是一个彻头彻尾的楚门的世界。</p></blockquote><h1 id="1-拉人"><a href="#1-拉人" class="headerlink" title="1 拉人"></a>1 拉人</h1><p>昨天下午我逛商场时，一个短发美女姐姐叫住我说，他们的造型店在搞活动，有一个嘉宾来做一天发型设计，邀请剪短发的路人去体验。</p><p>我长相显小，容易被认成高中生，经常会成为骗子的下手对象，也明白这样就是诱导消费，换做从前都是装聋。然而许久没有出门，昨天脑子进水，想看看是什么花样。</p><p>我说我没钱，我才上大学，很穷。</p><p>美女姐姐说，一百多剪一次也贵吗？</p><p>我：贵。</p><p>美女姐姐说，没事，你不能成为我们的潜在客户也没关系，我们发型师做设计是免费的，剪不剪由你决定。不剪也没事，你就听一听设计理念，今后一定会有所启发。</p><p>又 battle 了几轮，我想那就去吧。然后果不其然，美女姐姐一路带出门，带路到了商店的背面的路对面，比较偏僻没什么车，马路上全是隔着的围栏。</p><p>我看这地儿明显不对劲，说您先走，我回去了。美女姐姐说来都来了，去看看吧。</p><p>在路上，这位美女一直在说我头发塌，后面剪断层了。我寻思着都活过了两轮，所有人都是说我头发炸的，好不容易拉直打薄才到了刚刚好的水平，这还是第一次有人说我头发塌。</p><p>美女又问我你对自己的发型满意吗，哪里剪的。我说我很满意，40块剪的，很帅。</p><p>美女说，他可以让你的发型更上一层楼。</p><h1 id="2-油腻"><a href="#2-油腻" class="headerlink" title="2 油腻"></a>2 油腻</h1><p>进去是一家造型中心的装饰，装修一般，东西有些乱，在做头发的顾客只有一个，但人还显得挺多的。</p><p>一个身高不到170体重看起来180的Tony让我坐下，满脸堆笑，伸出手握手说：</p><p>“您好，您贵姓？”</p><p>“我姓林。”（假名）</p><p>“我叫星x，是今天来这的嘉宾，您可以叫我星哥。”</p><p>然后 Tony 分析起我的头发，说我头发的重量感都在耳旁，顶部太塌，头骨太平，和那位美女的说法如出一辙。“为了设计更符合您的脸型，可不可你请你把口罩摘下来呢？”</p><p>我觉得这算是个正常需求。摘下了口罩。然后……</p><p>Tony ：“你今天打了高光吗？” </p><p>“没有。”（这人看不出我没化妆？）</p><p>“那你鼻子天生这么立体吗？” </p><p>我：“光打得好吧。” （你有眼疾吗？）</p><p>“你知道你五官最吸引我的部位是哪里吗？”</p><p>我说不知道。</p><p>Tony笑了下，“是你的嘴唇。”</p><p>……………艹</p><p>Tony：“我应该今天应该好好收拾一下，主要是平时接待的都是30多岁的客户，没想到，可以遇见你。”</p><p>我无语了，这人有病。理发店Tony大多喜欢套人近乎，这种程度的还是头一次。长得帅的是撩，长得丑的是性骚扰。</p><h1 id="3-洗发小哥"><a href="#3-洗发小哥" class="headerlink" title="3 洗发小哥"></a>3 洗发小哥</h1><p>Tony说让我冲一下头发，看看发型发量和剪裁。</p><p>洗头小哥问，你是哪儿人，我说我是四川的。洗头小哥立刻说了句（貌似是）四川话。</p><p>我说您也四川的吗？</p><p>小哥：“我是云南的，在北京北漂。你知道我们这位嘉宾的价钱吗？”</p><p>我说不知道。</p><p>“这位嘉宾和很多明星艺人合作过，平时剪一次头要588。”</p><p>我：“我是学生，没钱。”</p><p>小哥：“你可以好好和他谈一下，应该学生的话能更低一点。”</p><p>小哥还向我打探了一下我最贵的理发消费是多少。</p><h1 id="4-装x"><a href="#4-装x" class="headerlink" title="4 装x"></a>4 装x</h1><p>回到梳妆台，Tony向我展示他手机，锁屏密码直接在我眼皮底下输入的。屏幕是他和关晓彤的合照，黑色的背景，国民闺女在照片上像在T台上一样有范，Tony穿着黑西装。相册里还有和高圆圆的合照，两照片风格差不多。当时时间太短没看细节。后来想想，这是P的，我也不是没见过明星的私下合照，哪有私下合照背景纯黑、这么正式和完美的。</p><p>Tony说，他平时是做培训的，也给明星艺人做造型。顾客受众一般都是30多岁的，会员费很贵，要两千。我表明我没钱，付不起，不是他的顾客。他说不是也没关系，你就先听听，你觉得可以了再考虑，要是你做得不满意我也不收你钱。</p><p>然后Tony又开始说我头发塌了，说有办法让发根蓬松维持四五个月不用去理发店，也能拉长上庭比例。我容易对没见过的东西有兴趣，也想看看是怎么发根蓬松法，再说我确实上庭稍微偏短，觉得可以试试。事后我总结了一下，只想要骗一次钱的人，说四五个月也肯定是忽悠人的。</p><p>我问Tony多少钱，Tony说我平时都是500起步，这次给你488。</p><p>我表示还是太贵了。Tony又说学生价的话，我可以给你388。然后又开始展示他的手机里看起来高端的东西，表示388真的很便宜。我勉强接受了。</p><p>Tony说：“我给你这么个优惠价”，然后俯下身轻轻在我耳边说，“一会儿你要好好想想怎么报答我。”</p><p>（先别急着吐，后面还有）</p><h1 id="5-x骚扰"><a href="#5-x骚扰" class="headerlink" title="5 x骚扰"></a>5 x骚扰</h1><p>Tony开始聊老家是哪，我说四川的。他说成都吗，春熙路他去过一段时间，妹子都很不错。“当时我在那一天就干三件事，你知道是什么吗？”</p><p>我：……不知道</p><p>Tony：“喝酒，上网，泡妞。”</p><hr><p>Tony：“你知道为什么我愿意给你做这个头发吗？”</p><p>我非常无语，我觉得他真的需要个捧哏。</p><p>Tony俯下身，到我耳边悄悄说：“因为我还挺喜欢南方姑娘的。”</p><p>……我有点恨我是个面瘫脸。</p><hr><p>Tony拔下箍头发用的铁丝，上面缠着红色绒布，说给你变个魔术你信不信。</p><p>我抬头看了他一眼，然后他把那个铁丝缠绕成红戒指的形状，把我手拉过去戴我食指上。</p><p>我无了个大语，说：“这就是你泡妞的方式吗？”</p><p>Tony一把把铁丝拔下来，“什么泡妞的方式，我在说这是手艺人呢，编得挺好吧，我还专门看了你手指的宽度做的。”</p><p>我：“手艺人做什么不好，做戒指，不正经。”</p><p>Tony：“嘿，她还说我不正经？以后不给你剪头发了。”</p><p>（希望看到这你还没有吐）</p><hr><p>问到学校，问我多大了，大几。我说我在读研。</p><p>Tony：研究生没有工资吗</p><p>我：有是有，一个月四百</p><p>Tony：这么少啊？感觉在学校收获了什么</p><p>我：没什么收获</p><p>Tony：收获了男朋友也算</p><p>我：好吧，收获了男朋友</p><p>Tony：挺好啊，解决了大事。你男朋友不给你提供你经济上的资助吗？</p><p>我：没有，我们各管各的。</p><p>Tony：要不我按你的标准给你介绍一个男朋友？</p><p>我：？这不太好吧</p><p>Tony：男性朋友</p><p>我：？这也不好吧</p><p>Tony：你不接受异性朋友？</p><p>我：对</p><h1 id="6-关于钱"><a href="#6-关于钱" class="headerlink" title="6 关于钱"></a>6 关于钱</h1><p>无一例外，推销就是让人花尽可能多的钱。而我之所以叫它骗钱，而非诱导消费，是因为完全超过了一般诱导消费的手段与范畴。</p><p>这个理发店有人专门负责陪聊天，陪聊小哥自称在德云社干过一段时间，老家是四川达州（怎么不是云南就是四川）。他主要负责宣传 “高端私人定制” 的概念。这应该是利用社会心理学的范畴了，但口才明显不比美女姐姐和Tony，可以说是很烂，说服不了我这种穷逼逻辑思维者。再说我一向对私人定制、高级vip等模式不看好，我一向认为商品化流水线化压低价格的形式才是最能说服大众购买其产品的。</p><p>我也很直接地说我这种人就是小白鼠，你们就是学着怎么解剖小白鼠的人。陪聊小哥解释说，我们和客户的关系更像是朋友，真心诚意为客户在服务。</p><p>然后又轮到Tony上场了。这个时候 Tony已经没有x骚扰了，重心全在钱上。因为我明显表示对发型不满意了，他开始宣传起了企业的靠谱性，打开了宣传册子。</p><p>“我们这个店在全国都有连锁，2013年开始就有店了，在北京、天津……”</p><p>我看了看，这个册子上店的名字和招牌不一样。事后再看大众点评，上面的名字又不一样。</p><p>我问Tony你不是被请来的嘉宾吗，他说自己在这个店有股份。</p><p>接着 Tony 又开始说办卡的事，给我看朋友圈的宣传，类似于“限定的诱惑”和饥饿营销，比如“今天可预约一位vip”。我说我对vip不感兴趣。</p><p>然后Tony又给我看了看微信列表，每个人都是名字+会员价的备注，比如 “金妮可 30000”。说会员卡谁都可以用，<strong>但不接待男性顾客</strong>。然后又和我说2000就能成为vip，他对不同价格的vip都是一个态度。我再次说我穷学生没钱。他说你把你的表当了都能剪好几次头发了。</p><p>他说的表是我手上戴的天梭表，因为太贵了我带了快10年了，自己动手换了一次表带换了三次电池。于是我说我表可以带10年，造型一年就过时了。</p><p>Tony又说我真的很想把你发展为顾客，学生价1000就行。我还是说没钱。他又说，1000让你三次烫染两次。我依旧说没钱，因为我是真没钱。</p><p>Tony说：“你没有花呗吗？”</p><p>我：“之前有过，我已经关了”</p><p>Tony说：“额度多少？”</p><p>我：“不记得，我不会超前消费的”</p><p>之后也问了我好几次花呗，使劲想让我用花呗。</p><hr><p>我说我穷的时候，提到了一下我这个月剪了三次头了。他问怎么剪这么多次。我说，被忽悠的呗。</p><p>Tony：“嘿，说得我忽悠了你似的，我就给你剪这一次，以后不给你剪了，说真的我不缺客户。”</p><p>天啦，我该说这人演得太投入，还是该说他太自信？</p><hr><p>在结帐的时候，我微信已经没钱了，抱怨了一下最近花得太多，只能用卡结账了。Tony明显顿了一下，什么卡？是信用卡吗？（因为信用卡负债状态跑路了商户也收不到钱）</p><p>后来记账时发现，结算页面没有此店的名字和标识，只有一个“美容美发中心”。</p><h1 id="7-关于发型"><a href="#7-关于发型" class="headerlink" title="7 关于发型"></a>7 关于发型</h1><p>Tony：“要是你回去同学看到了，就说我剪了一下，别说是做发根。”</p><p>我没明白怎么没头没尾来了这么一句，这能有啥不好说的。现在想来，是怕骗局被揭穿吧。</p><p>途中还来了一个妹子剪头。这个妹子的发型很迷，白色的头发，顶部特别高和头骨的比例完全不协调（我突然觉得我看骨相识人也不错）。当时Tony确认了一下，“这人是顾客吗？”然后让我等3分钟，看他展示什么叫3分钟剪完一个头发。我不知道这里的顾客是什么黑话。不过他剪的头发层次高得太离谱了，和妹子脸不配，太土了，审美实在不行。</p><p>现在觉得，这个顾客也可能是演员，带顶假发上场的。</p><p>至于我的发型，又变蓬了像狗熊。我剪完就去买个夹子夹塌了。朋友听了之后说你也是个奇葩，别人都要头发蓬，你要头发塌。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这个事作为写报道的素材真的非常不错。流行元素兼备，社会心理诱导话术、普信男问题、骗钱流程展示得很齐全，是一场精心策划后的全店大型骗局体验店，就是楚门的世界一样，整个环境、公司、Tony的照片、微信列表、公司宣传册，全是精心策划过的，没有一个人是真的。手段很典型，流程固定。美女负责拉人，Tony（主演人）负责展示“专业”分析能力让人“上道”，然后洗头小哥负责一次抬预期价，Tony 负责展示自己贵又忙，二次抬预期价，再给优惠价。途中不停打探你的经济状况以看办卡最多能收你多少钱，询问烫染和妆造意向，顺带言语性骚扰和暗示。最后证明此店的连锁真实性和规模庞大，再让人办卡。</p><p>另外这个诈骗集团应该不只有一个地点，因为他们问过我住哪，和我讲最近的连锁店是哪，那个地方应该也很偏僻，没有我熟悉的地标，我也记不住。另外，他说烫发根全北京只有两家能做，还把另一家的名字说出来了，推测也应该是同伙（谁会主动推荐自己的竞争对手），但我也没记住。如果要深入调查，应该会是个人不少的组织，干的事也不只表面理发这么简单。整个流程策划也挺全面的，绝非一时半会儿兴起的骗子能办出来的。</p><p>但希望主演人可以改进一下，对一般女性能有点常识，用力过猛了。群演的年纪普遍偏小，就按规矩说话不怎么能自由发挥，需要再练下演技。</p><p>对于我这种容易被忽悠的人，解决方法也很简单，足够穷就不会被骗钱了。</p><p>PS：我觉得我写得好开心…………</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;我原本以为是只是一场诱导式的恶意营销，细想来竟是一个彻头彻尾的楚门的世界。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1-拉人&quot;&gt;&lt;a href=&quot;#1-拉人&quot; class=&quot;headerlink&quot; title=&quot;1 拉人&quot;&gt;&lt;/a&gt;1 </summary>
      
    
    
    
    <category term="Diary" scheme="https://sansui233.github.io/categories/Diary/"/>
    
    
    <category term="生活" scheme="https://sansui233.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>受不了了，决定看看是谁在D我</title>
    <link href="https://sansui233.github.io/2020/12/12/%E5%8F%97%E4%B8%8D%E4%BA%86%E4%BA%86%EF%BC%8C%E5%86%B3%E5%AE%9A%E7%9C%8B%E7%9C%8B%E6%98%AF%E8%B0%81%E5%9C%A8D%E6%88%91/"/>
    <id>https://sansui233.github.io/2020/12/12/%E5%8F%97%E4%B8%8D%E4%BA%86%E4%BA%86%EF%BC%8C%E5%86%B3%E5%AE%9A%E7%9C%8B%E7%9C%8B%E6%98%AF%E8%B0%81%E5%9C%A8D%E6%88%91/</id>
    <published>2020-12-11T18:45:46.000Z</published>
    <updated>2020-12-11T19:16:24.218Z</updated>
    
    <content type="html"><![CDATA[<p>自从部署了服务器，一直都觉得访问量不太正常。但我也仅仅是对IP做了防护，CDN防火墙也没怎么设置。</p><p>直到最近觉得，天天访问上万，唯一IP数却一千不到，cache率更是一直都在1%以下。决定看看是哪些人（IP）干的事，服务器实在不值得。</p><h2 id="查看ip访问行为"><a href="#查看ip访问行为" class="headerlink" title="查看ip访问行为"></a>查看ip访问行为</h2><p>web服务器使用的nginx，由于CDN的关系，nginx需要有http-realip的模块才能查看CDN前的ip。找了不少资料就只觉得这个文章不错，废话少过程清晰，还很贴心给了生成脚本（和我流爱说废话自言自语的风格完全不同）</p><blockquote><p><a href="https://www.nenew.net/cloudflare-cdn-nginx-get-real-ip-tutorial.html">CloudFlare CDN下Nginx正确获取真实IP教程</a></p></blockquote><p>配置完成后运行了一段时间。先统计下当前的log文件前10名的访问量和相应ip：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ cat access.log | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>| sort -n | uniq -c | sort -n -r | head -10</span><br><span class="line"></span><br><span class="line">    979 103.242.119.217</span><br><span class="line">    285 1.163.108.18</span><br><span class="line">    204 18.166.211.38</span><br><span class="line">    176 184.170.243.198</span><br><span class="line">    154 66.98.113.44</span><br><span class="line">    149 40.65.134.91</span><br><span class="line">    116 2400:8902::f03c:92ff:fe7b:5f02</span><br><span class="line">    113 113.71.61.213</span><br><span class="line">     92 185.245.1.151</span><br><span class="line">     80 107.148.250.111</span><br></pre></td></tr></table></figure><p>第一名， <code>103.242.119.217</code> ，979次？这多得也太夸张了？！</p><p>好吧，来看看这个ip在干什么。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ cat access.log | grep 103.242.119.217 | tail -n 20</span><br><span class="line">103.242.119.217 - - [10/Dec/2020:08:54:41 +0000] <span class="string">&quot;GET /WWW/phpMyAdmin/index.php HTTP/1.1&quot;</span> 404 178 <span class="string">&quot;-&quot;</span> <span class="string">&quot;Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0&quot;</span></span><br><span class="line">103.242.119.217 - - [10/Dec/2020:08:54:41 +0000] <span class="string">&quot;GET /phpMyAdmln/index.php HTTP/1.1&quot;</span> 404 178 <span class="string">&quot;-&quot;</span> <span class="string">&quot;Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0&quot;</span></span><br><span class="line">103.242.119.217 - - [10/Dec/2020:08:54:41 +0000] <span class="string">&quot;GET /phpMyAdmin_ai/index.php HTTP/1.1&quot;</span> 404 178 <span class="string">&quot;-&quot;</span> <span class="string">&quot;Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0&quot;</span></span><br><span class="line">103.242.119.217 - - [10/Dec/2020:08:54:41 +0000] <span class="string">&quot;GET /__phpMyAdmin/index.php HTTP/1.1&quot;</span> 404 178 <span class="string">&quot;-&quot;</span> <span class="string">&quot;Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0&quot;</span></span><br><span class="line">103.242.119.217 - - [10/Dec/2020:08:54:42 +0000] <span class="string">&quot;GET /program/index.php HTTP/1.1&quot;</span> 404 178 <span class="string">&quot;-&quot;</span> <span class="string">&quot;Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0&quot;</span></span><br><span class="line">103.242.119.217 - - [10/Dec/2020:08:54:42 +0000] <span class="string">&quot;GET /shopdb/index.php HTTP/1.1&quot;</span> 404 178 <span class="string">&quot;-&quot;</span> <span class="string">&quot;Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0&quot;</span></span><br><span class="line">103.242.119.217 - - [10/Dec/2020:08:54:42 +0000] <span class="string">&quot;GET /phppma/index.php HTTP/1.1&quot;</span> 404 178 <span class="string">&quot;-&quot;</span> <span class="string">&quot;Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0&quot;</span></span><br><span class="line">103.242.119.217 - - [10/Dec/2020:08:54:42 +0000] <span class="string">&quot;GET /phpmy/index.php HTTP/1.1&quot;</span> 404 178 <span class="string">&quot;-&quot;</span> <span class="string">&quot;Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0&quot;</span></span><br><span class="line">103.242.119.217 - - [10/Dec/2020:08:54:43 +0000] <span class="string">&quot;GET /mysql/admin/index.php HTTP/1.1&quot;</span> 404 178 <span class="string">&quot;-&quot;</span> <span class="string">&quot;Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0&quot;</span></span><br><span class="line">103.242.119.217 - - [10/Dec/2020:08:54:43 +0000] <span class="string">&quot;GET /mysql/dbadmin/index.php HTTP/1.1&quot;</span> 404 178 <span class="string">&quot;-&quot;</span> <span class="string">&quot;Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0&quot;</span></span><br><span class="line">103.242.119.217 - - [10/Dec/2020:08:54:43 +0000] <span class="string">&quot;GET /mysql/sqlmanager/index.php HTTP/1.1&quot;</span> 404 178 <span class="string">&quot;-&quot;</span> <span class="string">&quot;Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0&quot;</span></span><br><span class="line">103.242.119.217 - - [10/Dec/2020:08:54:43 +0000] <span class="string">&quot;GET /mysql/mysqlmanager/index.php HTTP/1.1&quot;</span> 404 178 <span class="string">&quot;-&quot;</span> <span class="string">&quot;Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0&quot;</span></span><br><span class="line">103.242.119.217 - - [10/Dec/2020:08:54:44 +0000] <span class="string">&quot;GET /wp-content/plugins/portable-phpmyadmin/wp-pma-mod/index.php HTTP/1.1&quot;</span> 404 178 <span class="string">&quot;-&quot;</span> <span class="string">&quot;Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0&quot;</span></span><br><span class="line">103.242.119.217 - - [10/Dec/2020:08:54:44 +0000] <span class="string">&quot;GET /sqladmin/index.php HTTP/1.1&quot;</span> 404 178 <span class="string">&quot;-&quot;</span> <span class="string">&quot;Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0&quot;</span></span><br><span class="line">103.242.119.217 - - [10/Dec/2020:08:54:44 +0000] <span class="string">&quot;GET /sql/index.php HTTP/1.1&quot;</span> 404 178 <span class="string">&quot;-&quot;</span> <span class="string">&quot;Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0&quot;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>…………尼玛，恶意扫描啊！扫描常用路由啊碰运气啊！人干事？</p><p>但估计这种恶意扫描的也是日抛ip，ban也没什么意义。只能设置limit rate了。</p><p>看看第二名在干什么。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ cat access.log | grep 1.163.108.18 | tail -n 10</span><br><span class="line">1.163.108.18 - - [10/Dec/2020:10:15:38 +0000] <span class="string">&quot;GET /clash/config HTTP/1.1&quot;</span> 200 4978 <span class="string">&quot;-&quot;</span> <span class="string">&quot;ClashforWindows/0.13.1&quot;</span></span><br><span class="line">1.163.108.18 - - [10/Dec/2020:10:16:36 +0000] <span class="string">&quot;GET /clash/config HTTP/1.1&quot;</span> 200 4978 <span class="string">&quot;-&quot;</span> <span class="string">&quot;ClashforWindows/0.13.1&quot;</span></span><br><span class="line">1.163.108.18 - - [10/Dec/2020:10:17:36 +0000] <span class="string">&quot;GET /clash/config HTTP/1.1&quot;</span> 200 4978 <span class="string">&quot;-&quot;</span> <span class="string">&quot;ClashforWindows/0.13.1&quot;</span></span><br><span class="line">1.163.108.18 - - [10/Dec/2020:10:18:31 +0000] <span class="string">&quot;GET /clash/config HTTP/1.1&quot;</span> 200 4978 <span class="string">&quot;-&quot;</span> <span class="string">&quot;ClashforWindows/0.13.1&quot;</span></span><br><span class="line">1.163.108.18 - - [10/Dec/2020:10:19:32 +0000] <span class="string">&quot;GET /clash/config HTTP/1.1&quot;</span> 200 4978 <span class="string">&quot;-&quot;</span> <span class="string">&quot;ClashforWindows/0.13.1&quot;</span></span><br><span class="line">1.163.108.18 - - [10/Dec/2020:10:20:35 +0000] <span class="string">&quot;GET /clash/config HTTP/1.1&quot;</span> 200 4978 <span class="string">&quot;-&quot;</span> <span class="string">&quot;ClashforWindows/0.13.1&quot;</span></span><br><span class="line">1.163.108.18 - - [10/Dec/2020:10:21:30 +0000] <span class="string">&quot;GET /clash/config HTTP/1.1&quot;</span> 200 4978 <span class="string">&quot;-&quot;</span> <span class="string">&quot;ClashforWindows/0.13.1&quot;</span></span><br><span class="line">1.163.108.18 - - [10/Dec/2020:10:22:34 +0000] <span class="string">&quot;GET /clash/config HTTP/1.1&quot;</span> 200 4978 <span class="string">&quot;-&quot;</span> <span class="string">&quot;ClashforWindows/0.13.1&quot;</span></span><br><span class="line">1.163.108.18 - - [10/Dec/2020:10:23:36 +0000] <span class="string">&quot;GET /clash/config HTTP/1.1&quot;</span> 200 4978 <span class="string">&quot;-&quot;</span> <span class="string">&quot;ClashforWindows/0.13.1&quot;</span></span><br><span class="line">1.163.108.18 - - [10/Dec/2020:10:24:32 +0000] <span class="string">&quot;GET /clash/config HTTP/1.1&quot;</span> 200 4978 <span class="string">&quot;-&quot;</span> <span class="string">&quot;ClashforWindows/0.13.1&quot;</span></span><br></pre></td></tr></table></figure><p>这应该是个用户吧，但你这更新就更新吧，每分钟更新一次？能不能积点德？（哽塞.jpg）</p><p>消耗流量都是其次，也并没有多出很多。但我不喜欢泡沫和虚高的数值，也讨厌因为不用付出成本所以极其浪费资源的做法，于我而言就像房间堆满了垃圾。看起来好像有很多东西，实际上什么也没有。</p><p>要是我这种心态，创业肯定找不到风投，很快就倒闭。</p><p>这些IP ban了也不太好……开个Challenge吧。</p><p>顺带一提，默认配置文件的更新间隔早就给取消了。取消的原因倒不是怕被D，当时还完全没想过会租服务器，只是单纯的因为程序会有各种意想不到的BUG，时不时出现全NULL，连之前能用的都没有了……自动更新太容易挂掉，于是取消了自动更新。</p><p>然后继续看，从第2名到第8名都是这种行为。我说呢，今天从浏览器进入的配置文件的页面一直无法加载，但服务端不管怎么请求都没有问题，最后不得已换成了一个静态文件。敢情就是你们搞没的？</p><p>再加上gin的静态cache本身就不太稳。之前使用css的时候基本运行3天就外链请求不出来了，最后也是用nginx挂的静态文件。</p><p>第7名到第10名，很明显，同类程序的爬虫。Duang地一下请求几个一般人不用的链接。对于这些爬虫我觉得倒还行，请求频率并不会太高。但非常不喜欢直接伸手全爬别人爬好的，这是极其恶劣的生态与shame的想法。爬虫的理想的状态是网状分布式的部署，而不是树。</p><h2 id="防护措施"><a href="#防护措施" class="headerlink" title="防护措施"></a>防护措施</h2><p>由于挂了CloudFlare，iptables自然没什么用，还容易不小心把CF的IP ban掉（虽然在发现这一点之前我折腾了快一下午的iptables）。直接去配置CF的防火墙。</p><p>我需要应对的情况主要就这一个：</p><ul><li>一分钟更新一次配置文件的ip，给他们一个小小的JS Chanllenge</li></ul><p>（突然有点后悔写了JS Chanllenge的破解是什么回事……）</p><p>但是啊，这些ip还是不少活人的，长期都Chanllenge没有必要。而且我也不能天天都像今天这么看log，实在是消耗时间，消耗时间就是生命。</p><p>而Nginx和CloudFlare的rate limit都是防止CC，限制的每秒或者每分钟的请求数。但这恰恰是我不能做的，默认的配置文件的写法1s内会请求十几次，多请求几次就一分钟就几十次了（配置文件该改改了）。我需要处理的是过于规律且相对频繁的请求，而非CC。</p><p>于是连夜写了个分析log的程序，主要是以下功能：</p><ul><li>根据请求间隔的规律判断是否为需要处理的ip<br>特征：<ul><li>请求间隔过于规律，比如每分钟一次、每分钟两次等等。有容错率。</li><li>不计算大于 <code>threshold</code> 分钟的间隔与等于0分钟的间隔。</li></ul></li><li>排除CloudFlare子网下的IP。CloudFlare的ip网段在线获取。</li><li>使用CloudFlare Api更新JS Chanllenge的filter，给需要过滤的ip加上Challenge</li></ul><p>然后用cron定时执行。常驻后台没必要，也没想做实时监控，</p><p>把恶意IP和常见的IP过滤掉后，最新的就只剩下CloudFlare的请求了，终于干净了……但好寂寞啊…………看来是真的没什么活人用呢。</p><h2 id="一天后"><a href="#一天后" class="headerlink" title="一天后"></a>一天后</h2><p>今天的Requests数是17435。</p><p>Unique Request是1188。</p><p>Challenge挑战的Request数是，8200（微笑脸）。</p><p>你妹啊，Bot一样的自动更新占了快一半啊！摔！</p><p>而且每次防火墙每次更新过滤的ip都是那么40个左右，Challenge通过率是0.5%。</p><p>40ip个会不会有点多？是不是程序有问题？我开始也这么想过，但我自己也设置有定时更新，还设置了三份，都没见把我自己ban掉。</p><p>累了，感觉不再爱了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;自从部署了服务器，一直都觉得访问量不太正常。但我也仅仅是对IP做了防护，CDN防火墙也没怎么设置。&lt;/p&gt;
&lt;p&gt;直到最近觉得，天天访问上万，唯一IP数却一千不到，cache率更是一直都在1%以下。决定看看是哪些人（IP）干的事，服务器实在不值得。&lt;/p&gt;
&lt;h2 id=&quot;</summary>
      
    
    
    
    <category term="折腾" scheme="https://sansui233.github.io/categories/%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="运维" scheme="https://sansui233.github.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
    <category term="nginx" scheme="https://sansui233.github.io/tags/nginx/"/>
    
    <category term="cloudflare" scheme="https://sansui233.github.io/tags/cloudflare/"/>
    
  </entry>
  
  <entry>
    <title>关于Golang的结构体与指针不得不提的二三事</title>
    <link href="https://sansui233.github.io/2020/11/26/%E5%85%B3%E4%BA%8EGolang%E7%9A%84%E7%BB%93%E6%9E%84%E4%BD%93%E4%B8%8E%E6%8C%87%E9%92%88%E4%B8%8D%E5%BE%97%E4%B8%8D%E6%8F%90%E7%9A%84%E4%BA%8C%E4%B8%89%E4%BA%8B/"/>
    <id>https://sansui233.github.io/2020/11/26/%E5%85%B3%E4%BA%8EGolang%E7%9A%84%E7%BB%93%E6%9E%84%E4%BD%93%E4%B8%8E%E6%8C%87%E9%92%88%E4%B8%8D%E5%BE%97%E4%B8%8D%E6%8F%90%E7%9A%84%E4%BA%8C%E4%B8%89%E4%BA%8B/</id>
    <published>2020-11-26T15:14:47.000Z</published>
    <updated>2020-11-26T11:48:06.006Z</updated>
    
    <content type="html"><![CDATA[<p>之前在学C++的时候，指针的用法就困惑了很久。后来有了计算机体系结构基础后，再加上Golang的一些说明，就突然明白了，之前纠结的点在哪里。</p><p>其实让我明白的只是因为<a href="https://tour.golang.org/moretypes/4">Go tour</a>中的两句话：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Struct fields can be accessed through a struct pointer.</span><br><span class="line">结构体字段可以使用结构体指针获取。</span><br><span class="line"></span><br><span class="line">To access the field X of a struct when we have the struct pointer p we could write (*p).X. However, that notation is cumbersome, so the language permits us instead to write just p.X, without the explicit dereference.</span><br><span class="line">结构体指针访问字段本来应该写成(*p).x，但是由于这么写太蠢了，所以允许直接写成p.x。</span><br></pre></td></tr></table></figure><p>也就是说，如果见到类似<code>T.x</code>的结构体访问，T有可能是结构体本身，也可能是指针……需要自行区分。</p><p>但有的时候会有很难区分的情况：</p><ul><li><p>定义了一个接口Interface，方法有Intera()，Interb()</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Interface <span class="keyword">interface</span>&#123;</span><br><span class="line">Intera()</span><br><span class="line">Interb()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义了一个结构体Base，用结构体指针的方式实现了Intera()</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Base <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Base)</span> <span class="title">Intera</span><span class="params">()</span></span> &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义了一个结构体Extend，匿名组合了Base，用正常结构体的方式实现了Interb()</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Extend <span class="keyword">struct</span> &#123;</span><br><span class="line">  Base</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e Extend)</span> <span class="title">Interb</span><span class="params">()</span></span> &#123;&#125;</span><br></pre></td></tr></table></figure></li></ul><p>这个时候，请问谁实现了Interface？</p><p>答案是<strong>Base和Extend本身都没有实现Interface</strong>。</p><p>但是上述代码中完全没有出现的*<strong>Extend（Extend的指针）实现了Interface</strong>。</p><p>为什么呢？虽然<strong>*Extend</strong>并没有实现第二个方法，但<strong>Extend</strong>实现了，所以<strong>*Extend</strong>是也是可以直接访问第二个方法的（参考上面的(*p).x的解释）。</p><p>而<strong>*Base</strong>实现了第一个方法（Base没有实现），而<strong>Extend</strong>组合了<strong>Base</strong>。因此第一个方法可以也通过<strong>*Extend</strong>访问（Extend无法访问）。</p><p>所以<strong>*Extend</strong>两个方法都能访问，因此实现了Interface。而<strong>Extend</strong>只能访问第二个方法，因此没有实现Interface。</p><p>然后日常使用Extend的时候，为了能使用Interface的方法，会这么写：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">interfacelist := <span class="built_in">make</span>([]Interface, <span class="number">0</span>)</span><br><span class="line">interfacelist = <span class="built_in">append</span>(interfacelist, &amp;Extend&#123;&#125;) <span class="comment">// 因为是指针实现Interface，需要传入地址</span></span><br><span class="line">e = interfacelist[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>在goland对e按下F1时，只会显示，这是个Interface，不会告诉你这是*Extend。如果不是自己从头写的代码，你可能很久都无法发现，这个Interface的实现其实是个指针。你必须在层层组合中，找到是哪一层（这里是Base）让Extend变成了Interface的指针实现。</p><p>对e的type assertion也应该这么写：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e_ptr = e.(*Extend) <span class="comment">// 从Interface类型返回一个Extend类型的指针</span></span><br><span class="line">e_ptr.Base <span class="comment">// 等于(*e_ptr).Base</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;之前在学C++的时候，指针的用法就困惑了很久。后来有了计算机体系结构基础后，再加上Golang的一些说明，就突然明白了，之前纠结的点在哪里。&lt;/p&gt;
&lt;p&gt;其实让我明白的只是因为&lt;a href=&quot;https://tour.golang.org/moretypes/4&quot;&gt;Go</summary>
      
    
    
    
    <category term="折腾" scheme="https://sansui233.github.io/categories/%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="Golang" scheme="https://sansui233.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>关于Golang程序的内存占用过大的问题</title>
    <link href="https://sansui233.github.io/2020/11/19/%E5%85%B3%E4%BA%8EGolang%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%86%85%E5%AD%98%E5%8D%A0%E7%94%A8%E8%BF%87%E5%A4%A7%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://sansui233.github.io/2020/11/19/%E5%85%B3%E4%BA%8EGolang%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%86%85%E5%AD%98%E5%8D%A0%E7%94%A8%E8%BF%87%E5%A4%A7%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2020-11-19T15:14:47.000Z</published>
    <updated>2020-11-23T10:59:50.732Z</updated>
    
    <content type="html"><![CDATA[<p>之前看Mastering Go 2nd Edition，说到Golang的垃圾回收机制，说垃圾回收器(GC)每5分钟会调用一次。然而我观察服务器内存占用时，发现程序后的空闲器5分钟后，使用top查看内存占用并没有减少，大小是200M。因此开始怀疑起了是否有内存泄漏问题。</p><p>然而在使用pprof分析后，发现其报告的常驻内存占用只有10M，inuse_objects相对更多，也不过40M。goroutine没有泄漏，makeslice确实调用得非常多，但也仅仅是当时占用一下内存后来都释放了。有时候会有空闲的TCP连接，最后也被关闭了。可疑的代码都检查了一遍，最后认为只可能给内存造成压力但不应该内存泄漏。所以top查看的200M是怎么来的？</p><p>在我再也挖不出任何可能性时，直到看到这篇文章，经历几乎一模一样。并且写得非常清楚有逻辑，以至于我没有想再完整记录一遍我的经历的想法。这篇文章甚至详细到了解释每一步的pprof的操作和术语，调试过程非常值得学习。</p><ul><li><a href="https://blog.detectify.com/2019/09/05/how-we-tracked-down-a-memory-leak-in-one-of-our-go-microservices/">How we tracked down (what seemed like) a memory leak in one of our Go microservices</a></li></ul><p>最后结论就是，<strong>没有内存泄漏</strong>。Golang的垃圾回收机制在1.12后变了，不再是5分钟机制(每5分钟发送<code>MADV_DONTNEED</code>信号)，而变成Go会告诉系统有空闲的内存可以回收(发送<code>MADV_FREE</code>信号)，但什么时候把内存还给系统是需要系统决定。如果系统内存一直有空闲就可能一直不会还系统，导致top显示出的内存占用一直很大。</p><p>文章中还指出，如果想用之前那样的5分钟回收机制，运行时可以加上flag<code>GODEBUG=madvdontneed=1</code>。像之前那样使用<code>runtime.GC</code>与<code>runtime/debug</code>中的<code>FreeOSMemory</code>都没有效果，也就是不会发送<code>MADV_DONTNEED</code>信号。</p><p>后来我也去查看了服务器的内存情况，发现，在一个小时后（程序这期间一直是空闲状态），内存终于降了100M，变得和之间相同了。确实是没有内存泄漏，纯属服务器闲的。</p><p>知道这一点后我的内存洁癖也算是消失了。因为一直非常讨厌高内存占用的应用，觉得是没有优化好。现在看来，这也能有泡沫，反倒是没事就去清一下内存没有必要，重新申请又是额外的开销。从前的（静态）语言确实需要程序员手动管理内存，而go语言在这一点上又帮程序员做了。</p><p>“手动强迫系统释放内存的行为都是耍流氓。”</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;之前看Mastering Go 2nd Edition，说到Golang的垃圾回收机制，说垃圾回收器(GC)每5分钟会调用一次。然而我观察服务器内存占用时，发现程序后的空闲器5分钟后，使用top查看内存占用并没有减少，大小是200M。因此开始怀疑起了是否有内存泄漏问题。&lt;/</summary>
      
    
    
    
    <category term="折腾" scheme="https://sansui233.github.io/categories/%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="Golang" scheme="https://sansui233.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>关于GFW的法律定罪之“非法获取计算机系统数据、非法控制计算机信息系统罪”</title>
    <link href="https://sansui233.github.io/2020/11/07/%E5%85%B3%E4%BA%8EGWF%E7%9A%84%E6%B3%95%E5%BE%8B%E5%AE%9A%E7%BD%AA%E4%B9%8B%E2%80%9C%E9%9D%9E%E6%B3%95%E8%8E%B7%E5%8F%96%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%95%B0%E6%8D%AE%E3%80%81%E9%9D%9E%E6%B3%95%E6%8E%A7%E5%88%B6%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E7%BD%AA%E2%80%9D/"/>
    <id>https://sansui233.github.io/2020/11/07/%E5%85%B3%E4%BA%8EGWF%E7%9A%84%E6%B3%95%E5%BE%8B%E5%AE%9A%E7%BD%AA%E4%B9%8B%E2%80%9C%E9%9D%9E%E6%B3%95%E8%8E%B7%E5%8F%96%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%95%B0%E6%8D%AE%E3%80%81%E9%9D%9E%E6%B3%95%E6%8E%A7%E5%88%B6%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E7%BD%AA%E2%80%9D/</id>
    <published>2020-11-06T17:04:58.000Z</published>
    <updated>2020-11-23T10:52:21.798Z</updated>
    
    <content type="html"><![CDATA[<p>之前看“不能使用该名称”的GFW定罪系列文章，阐述了司法实践中对于计算机概念不清晰导致的问题，觉得非常学术，逻辑上真的很有道理。所有回避攻击的手段怎么就变成入侵计算机或者非法访问网站了呢？</p><p>但最近在阅读Clash的源码时，突然开始觉得，“非法获取计算机系统数据、非法控制计算机信息系统罪”对于节点的提供者或许是成立的。</p><blockquote><p><strong>《中华人民共和国刑法》第285五条第2款</strong><br>违反国家规定，侵入前款规定以外的计算机信息系统或者采用其他技术手段，获取该计算机信息系统中存储、处理或者传输的数据，或者对该计算机信息系统实施非法控制</p></blockquote><p>下面说说为何觉得成立。</p><p>包括Clash在内，所有翻墙软件都具有两个部分，一个被称为outbound，为将加密后的数据发送至远程服务器（或接收数据）。outbound的常用协议为常见的ss、ssr等等。这个部分没有上述罪名的问题。</p><p>另一个部分称为inbound，此部分接管计算机系统的tcp请求(通常使用http或socks5)，将计算机系统原本应直接发送到服务器的流量接管到翻墙软件中。此系“非法获取计算机信息系统数据”的可能</p><p>在获取inbound传入的传输数据之后，使用outbound指定的协议，与proxy服务器建立加密的连接，通过节点服务器发送流量。而节点服务器接管流量并返回到用户端时，传输的数据同样要使用软件的inbound写入浏览器。此系“非法控制计算机信息系统”的可能。</p><p>不论如何，“获取计算机信息系统中传输的数据”是肯定无法避免的。此时的问题在于：1.是否违反国家规定（非法性）这一点非常口袋了，又要回到信道上。2.获取数据的客体并非是人，而是计算机程序，虽然程序的制作者并没有获取任何数据，但节点的提供者是可以的，很好的例子就是机场面板里可以显示用户最近使用的IP。</p><p>对于翻墙软件的制作者而言，如果上述对于节点提供者的“非法获取计算机信息系统数据、非法控制计算机信息系统罪”成立，则“提供侵入、非法控制计算机信息系统的程序、工具罪”也相应成立。</p><p>当然，这一切的前提，都建立在“非法性”的基础上。什么样的技术用于做什么合法没有规定。最受争议的“非法信道”在司法实践中也一直脱离了法律中“物理信道”的解释，涵盖了非物理信道，可以称其为口袋之源。</p><p>参考：</p><ul><li><a href="https://zh.wikipedia.org/wiki/%E6%8F%90%E4%BE%9B%E4%BE%B5%E5%85%A5%E3%80%81%E9%9D%9E%E6%B3%95%E6%8E%A7%E5%88%B6%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%A8%8B%E5%BA%8F%E3%80%81%E5%B7%A5%E5%85%B7%E7%BD%AA#cite_note-lx-1">提供侵入、非法控制计算机信息系统的程序、工具罪</a></li><li><a href="https://zh.wikipedia.org/wiki/%E9%9D%9E%E6%B3%95%E8%8E%B7%E5%8F%96%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E6%95%B0%E6%8D%AE%E3%80%81%E9%9D%9E%E6%B3%95%E6%8E%A7%E5%88%B6%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E7%BD%AA">非法获取计算机信息系统数据、非法控制计算机信息系统罪</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;之前看“不能使用该名称”的GFW定罪系列文章，阐述了司法实践中对于计算机概念不清晰导致的问题，觉得非常学术，逻辑上真的很有道理。所有回避攻击的手段怎么就变成入侵计算机或者非法访问网站了呢？&lt;/p&gt;
&lt;p&gt;但最近在阅读Clash的源码时，突然开始觉得，“非法获取计算机系统数据</summary>
      
    
    
    
    <category term="其他" scheme="https://sansui233.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
    <category term="法律" scheme="https://sansui233.github.io/tags/%E6%B3%95%E5%BE%8B/"/>
    
    <category term="GFW" scheme="https://sansui233.github.io/tags/GFW/"/>
    
  </entry>
  
  <entry>
    <title>随谈20201125-20210514</title>
    <link href="https://sansui233.github.io/2020/10/30/%E9%9A%8F%E8%B0%88201030/"/>
    <id>https://sansui233.github.io/2020/10/30/%E9%9A%8F%E8%B0%88201030/</id>
    <published>2020-10-30T13:59:11.000Z</published>
    <updated>2021-05-15T03:33:06.566Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2021-05-15-凌晨"><a href="#2021-05-15-凌晨" class="headerlink" title="2021-05-15 凌晨"></a>2021-05-15 凌晨</h2><p>说真的， 最近就是间歇性的，没有兴趣。</p><p>一个本该是不撞南墙不回头的人，放弃了一切，落得一身的空虚。竟然还妄想让别人把他从前的一切还回来。凭什么？</p><p>一直都明白自己倒底想要什么，可冲突了，放下了。不是自己的问题吗？是自己的问题吗？是不是自己的问题？回答我到底是不是！！</p><p>「返せ！取り返せ！」</p><p>蹲着，头埋在胳膊里，没有灯光。</p><p>妈的时常觉得自己内心戏太多快疯了。快去找工作吧上天，我一个人呆着会出事。</p><h2 id="2021-05-10-凌晨"><a href="#2021-05-10-凌晨" class="headerlink" title="2021-05-10 凌晨"></a>2021-05-10 凌晨</h2><p>累了。</p><p>我运动了很多，喝水喝了很多，因为我平时不发动态，反正不会被相信。</p><p>就是努力了很多很多，最终小心翼翼地拿出来夸夸自己，也不被相信，还被倒踩一脚，我讨厌这种事。</p><p>终究是不合时宜的自我感动。</p><p>我希望有人可以相信我说的话，我希望我可以感受到别人在相信我说的话。我希望下次能听到的是“你很有进步啊”，而不是“我不信”。我不想为了获取关系中的信任而着急，而扯谎吹牛，而勉强自己，这就是pua，除了斩断联系我毫无办法。</p><p>我想听正常的说教而不要充斥任何上下级“权威”的关系。上次在超市，一个小孩偷吃生鲜有冰块吐了，他妈妈在旁边气炸了，一直骂，非常引人注目，揪着孩子耳朵边走边骂，从商场负一楼到商场外，我们走时还在骂。要说是教育没错，可我想，孩子吐了已经很难受了，肯定下次也知道了，有什么好骂的。真的只是教育吗，还是一种“不听家长指挥”的发泄？</p><p>我明白无条件的相信与爱是不存在的。</p><h2 id="2021-04-14"><a href="#2021-04-14" class="headerlink" title="2021-04-14"></a>2021-04-14</h2><p>靠，前段时间是什么诡异的发言。</p><h2 id="2021-03-22-下午"><a href="#2021-03-22-下午" class="headerlink" title="2021-03-22 下午"></a>2021-03-22 下午</h2><p>一个认识很久的网友去参加从前很出名、现在依然在播但不那么出名的综艺节目了。大概是因为参加节目所以才注册了微博账号，然后每期营出来个业。我知道这事还是因为这位大v来主动关注了我的账号。感觉他能这样认识到更多的人，真是好事啊。</p><p>但关于营业这一点我一直有不同的看法。他会组建粉丝群，有时候营业不知道说什么，就发点才艺什么的，作为粉丝福利。关于这一点其实没什么不好，我没有资格去说别人，只是以我的角度大概率是不会这么做。虽然是公众人物，毕竟也不是艺人，也没那么多粉丝，更多是一个圈子的人。要作为公众账号营业的话，还是多产出一些对大众有意义有价值的东西吧。做做教程、说点有意义的观点什么的。除非真的是艺人，或者有十分突出的个人气质，没什么人想看打游戏弹琴养花这种无聊的日常。当然如果是私人账号那想发啥发啥，开心就好。</p><p>这个博客就是不考虑受众想写啥写啥的，爱灌水就灌水。</p><p>给人看的东西和自己觉得好看的东西永远是两回事。给人看的东西以他人价值，换言之，用户需求为核心。自己觉得好看的实在是太小众了。当时小学期的小程序课想写rss被老师怼得体无完肤，说这有什么意义你该做个推荐系统。现在想来是角度不一样，我作为学生考虑的自然是能不能技术实现，当时连推荐系统的大概框架都不知道，而老师的重点这东西是有没有用。谁知道这课原来一点技术都不讲只是个画大饼的课呢。我为什么要折磨自己，还连累信任我的舍友逼他做数据格式转换。选个实验水课不好吗。</p><p>要不我还是去前端吧，还是喜欢有社会心理学在内起作用的东西，反正最终目的是转行。</p><hr><p>我最近被种草了一个洗袜子的机器，虽然很多人会觉得是交智商税，但我真的不觉得。</p><p>为什么是交智商税呢？因为这个机器一次只能洗一双袜子，洗一次要一个多小时（因为要杀菌和烘干），而且不能洗脚皮和灰尘，只能洗能溶于高温水的东西，比如汗之类的。</p><p>但我觉得，日常的袜子也没什么灰尘脚皮，我又爱出汗。每天只需要把袜子一放加点水，我就可以去做别的事了。想穿时直接拿出来就可以穿。我洗袜子所花的时间只有“加水”“放袜子”。我再也不用堆着手洗袜子了，还要想着晾干取袜子叠好收起来。洗袜子从一件一周一次的大事变成了每天微不足道的小事。</p><p>不过以上的前提是，我不能忍受袜子和衣服一起洗，加了消毒液也不行。天天洗袜子又很麻烦，我就会尽量穿久一些，但这样鞋也容易脏袜子也会臭。所以我只能堆着手洗，每次洗很多的袜子，烦死了。</p><p>同理，做清洁也是一样。我喜欢环境干净整洁一些，但是真讨厌把美好的周末花在家务上。要是有足够好用的扫拖一体机器人我就天天让它们扫三天让它们拖，反正白天人也是出门。这样周末躺着就行了，顶多清理下机器人。</p><p>花钱请人也行。但由于我没有钱，我对人也不够信任又不喜欢去控制别人，还是作罢。</p><h2 id="2021-03-18-晚上"><a href="#2021-03-18-晚上" class="headerlink" title="2021-03-18 晚上"></a>2021-03-18 晚上</h2><p>回来就能感受到压力了，这是好事，省得整天瞎想。还没过年时他们就开始卷了。与我何干呢，我又何德何能呢。</p><p>老S说他娘的不想打工了点儿生活都没有，打算去国企了。他这人之前加班很厉害的，多少还是让我有点惊讶。果然还是做自己喜欢的事才能忍下去，还真是天时地利人和，缺一不可。</p><p>我才是对生活最不抱期待的那一个，却是最混吃等死的那一个。只要能满足我一点点精神上的需求就能当工作的永动机了。我庆幸自己有明确喜欢的工作，我厌恶自己抛弃了喜欢的工作，我憎恨没有勇气去做喜欢的工作。</p><p>所爱的人来得不合时宜，更好的人依旧不合时宜；热情来得不合时宜，消失得不合时宜。</p><p>来来回回四个字，不合时宜。</p><p>不合时宜非天非地，惟我而。</p><p>只希望能开心，有钱赚。有钱赚的秘诀就是开心着赚钱，这是沉没成本最少的做法不是吗。</p><p>最近也不是很能控制好情绪。虽然我已经在逐渐恢复成INTP了，但Fi还是很高。Fi高时就会感受痛苦，整个人就会变得很艺术像发疯一样。说艺术家多少是疯子不无道理。昨晚哭过又草草画了个草图，觉得自己真的是越来越不讨人喜欢了，醒来自己都看着不舒服，是我画过的我最讨厌的画。</p><p><img src="https://i.loli.net/2021/03/18/KiXjpdTtaoN1Hhy.jpg" alt="最讨厌的画"></p><h2 id="2021-03-16-晚上"><a href="#2021-03-16-晚上" class="headerlink" title="2021-03-16 晚上"></a>2021-03-16 晚上</h2><p>没有人是孤岛没错，但也没人规定非得是爱人。可社会规定了。</p><p>六楼看出去，高楼林林耸耸，路灯是最忠实的守卫，静静眺望着每一个行人。永远直直地站在那里，看着很安心。</p><p>楼也是生命，以人为血液。人在楼里衣食起居，熬夜加班。穿梭不息，远远看去就像蚂蚁一般。楼是稳定的，人是不安分的。</p><h2 id="2021-02-19-凌晨"><a href="#2021-02-19-凌晨" class="headerlink" title="2021-02-19 凌晨"></a>2021-02-19 凌晨</h2><p>很久没有写过代码了。不停的与我无关的饭局。春节期间的厌食与社恐达到了顶点。对于内向型人格，不停的社交无法提交社交技能，只会更加讨厌社交，大概唯一的用处是能看到真实的人长什么样。</p><p>很不容易，今天下午终于宅着开始写了点无关紧要的代码，心情终于好了一点。真正的工作还远着，还没开始，可能也永远不会开始。</p><p>至少对于我，F是后天逼出来的，我确信这一点。如果说社会把外貌与性格联系成了刻板印象，那我原本就是与刻板印象格格不入那一卦的。什么人就该做什么这种话，可以硬生生把Ti逼成Fi。ルールはルールだ这种也是真他妈的讨厌，他の選択ねーじゃん？那人类社会进步个啥？</p><p>“大过年的”“来都来了”“还是孩子“都不容易”</p><h2 id="2020-12-04-凌晨"><a href="#2020-12-04-凌晨" class="headerlink" title="2020-12-04 凌晨"></a>2020-12-04 凌晨</h2><p>昨天看到很久之前和Ayuくん写的歌词，又想写歌了。但想了很一会儿，还是没法先有歌词再写旋律。歌词于我而言真是音乐中最次要的东西了。</p><p>然后打开garageband，又被其鸡肋的功能劝退了，还不如caustic一个小小的合成器。写歌这事，还是得等有钱再说吧，至少得有钱装4T的音源同时加载不会卡。不愧是最花钱又容易失业的行业。</p><p>但还是感谢之前喜欢学理论的时期，让我用音乐可以表达的范围广了很多，现在不用太在意和弦调式音程不够丰富的问题了，但还需要研究旋律写作、节奏和制作。啊 ，东西还是有一些多的，都是后话了，先处理好身边的事吧。我完全没有资格谈论这些。</p><p>要是对别人说“你事情没做完没资格谈论这些”想想就很残忍，理论上也不应该是这样，谁说一事无成就不能谈论音乐了，音乐是包容的。但对自己说这些话就非常的理所当然，因为我研究这些总会到一种吃不上饭的程度。</p><p>野田洋次郎真是音乐天才啊。</p><h2 id="2020-12-03-05-05-50"><a href="#2020-12-03-05-05-50" class="headerlink" title="2020-12-03 05:05:50"></a>2020-12-03 05:05:50</h2><p>又没睡着。</p><h2 id="2020-11-30-凌晨"><a href="#2020-11-30-凌晨" class="headerlink" title="2020-11-30 凌晨"></a>2020-11-30 凌晨</h2><p>我开始讨厌夜晚了，夜晚才有机会痛苦，所以每个夜晚开始的时候都非常痛苦。</p><p>我听着タコタ，想着在一个孤独的星球上，没有大气层，所以天是漆黑的。没有别人，有个看起来就很脆弱、竹竿一样的小男孩笑对我伸出手。而我是白色吊带裙的小女孩。</p><p>没有开题的状态。明天就是截止日期了，我一个字没动。可当我打开word，就被没有夜间模式的面晃瞎了眼睛。</p><p>从本科毕业开始，我就觉得毕设是我做过的大学期间最没有意义的事情。研究生入学考试放在毕业设计之前，目的就是为了让我这样不明所以的人去读研吧。如果放在毕业设计之后，不知道会少多少读研的人。</p><p>无所谓了，明明很多时候没意义到想死来试试看，但总觉得还是有没有尝试的很好的事情，所以非常痛苦。</p><h2 id="2020-11-28-凌晨"><a href="#2020-11-28-凌晨" class="headerlink" title="2020-11-28 凌晨"></a>2020-11-28 凌晨</h2><p>特别喜欢「蝶々結び」3:30那里一片寂静后突然从#f小三度转入C开始合唱的部分，感觉这样真的很好，瞬间从孤单的状态解脱出来了。</p><p>名词什么的现在忘了，好像是同主音大小调转换？不重要了，感觉好就很好。</p><p>想到很久之前我也是音乐理论的追求者，觉得好听是有规律的所以花了很久的时间看和声学，还有很长一段时间追求复杂的调式讨厌流行歌千篇一律的1645（小时候也中过1645的毒很久）。那时候Faded很火，有人让我听了之后，我不知道说什么好，心想这整个作曲编曲也太简单了，又非得夸点什么，只能说“啊，这个弯音好特别”（= =）如果换一般人大概该翻白眼了，幸好对方也很理科能从技术实现的角度接下去……</p><p>对于音乐“感觉至上”似乎是一般人的常识。我不知道大家是怎么理解这一点的，但对我来说绝对不是如此简单就能说出这么一句话的。如果能去看一点点有关和声学的基础的话，会发现大部分流行歌“好听”真的是建立在非常简单的理论基础上，甚至会产生出“有了这点知识我就也能写出好听的音乐”的错觉，实际上仅仅是能听而已，自我沉醉于和声带来的基础感觉中什么都没有表达出来（我骂我自己）。是为了什么写歌的，是为了学习“好听理论”让不明白人觉得很自己很厉害吗？</p><p>过了很久我才意识到，传统的和声、调式等等只是类似于地基一样的东西，还有很多东西能改变一首作品的感觉。即便是地基也不是必须的，也仅仅是前人对于感觉的总结，现在要创新的感觉都朝无调式的音乐方向走了……</p><p>现在觉得理论不是没用，没有理论的只有感觉的时候仅仅是在靠着感觉的积累照搬，仅仅是“别人这么做很不错我觉得用在我这也不错所以我也这么用”，可能就是所谓的没有天赋吧，就算弹得再好又幸运到创个省记录也无法掩盖没有心的实事。但若是把理论的高度作为天花板就更加本末倒置了。</p><p>啊，为什么又写了这么多，高考作文这么能扯就好了。</p><hr><p>哭是一种很厉害的情绪表达。人悲伤的时候会哭，高兴的时候会哭，放不下的时候会哭，放下的时候也会哭，心痛的时候会哭，释然的时候会哭。</p><p>继续看书，觉得连这样的人也能好好地活着，仿佛人生有了希望也会哭。</p><p>我也算是不怎么看得下去书的人，总是思考得太多。比起语言本身的优美这些东西，更喜欢凝视其中的想法。</p><blockquote><p>语言永远都敌不过感情和思考，很迟钝，因此有时会远远超过于我。明明是我在写，却变成了对我诉说。发怒、说教、激励、嘲笑。我肯定会被语言一直注视着。有时手握着手，和睦相处，有时不管写什么都不对。今后也会一直像这样重复着，时而紧贴，时而远离吧。就像是超越恋爱与友情的独一无二的存在。</p></blockquote><hr><p>母亲打电话时在非常真心地和我交流，我就像是一个机器人一样嗯嗯啊啊，什么也说不出来。</p><p>人在社会上究竟是什么呢，是商品吧，每个人都有标价。口头上说着“首要是谈得来”，又说着要把握机会，趁年轻抓住优秀的人，早早在喜欢别人之前就盘算好了想要对方什么条件。或者说，谈恋爱这个事情在他们看来就应该和恋爱分开来看，恋爱是“幸福”的事情。而结婚是寻找一个物质上能长期共处的“谈得来”对象，生子是寻找优秀的卵子与精子，以诞生更优秀的人类。如果你没有恋爱，也不要耽误你找好的结婚对象。如果你谈了恋爱，也要注意这是不是好的结婚对象。</p><p>我还是不明白，这两者是这么无关的事吗，谈恋爱与对方一直以来所受的教育、思考无关吗？不会考虑以后的相处吗？难道有人对你很好就能喜欢上，就算“谈得来”？母亲说她年轻时甚至很难拒绝别人的介绍的人，当然以我的时代立场我没有资格批评这种做法，如果我在那个环境里可能也一样。我只是单纯觉得，如果跳过了自己的的感觉而去勉强接受对方，就不要把找对象的事情贯以“幸福”的名义，这不是什么值得庆贺的事情，也不想看到别人对我谎话连篇地祝福。</p><p>喜欢什么人自己也得有去追的想法才是对的吧。</p><p>在为数不多的欲望最强烈可以随心所欲的年纪，盘算的全是这些事情。</p><p>不恰好に蝶にしないでよ。</p><p>真抱歉，在这么真心交流给人生建议的场合，我想的竟然是这些。</p><p>然后还说到了蚂蚁金服的事情，说到虚拟经济，又说出国家出面管控了。让我不禁想到ss作者说的那一段话。</p><blockquote><p>很多人要么一窝蜂的支持，要么一窝蜂的反对，还要把它给封禁掉，大概这种心理鲁迅先生也曾批判过。我还记得当年极路由在 V2EX 被冤枉的时候，也是一边倒的说极路由窃取隐私。如果你们真的那么讨厌商业，那你们应该首先把你们的苹果设备给摔了，因为它就是商业社会巅峰造极的产物。我反对不喜欢一个东西就要拿出简单粗暴的制裁手段，正是这种习性成就了 GFW。</p><p>维护这个项目到现在大概总共回复过几千个问题，开始慢慢想清楚了一件事，为什么会存在 GFW。从这些提问可以看出，大部分人的自理能力都很差，只是等着别人帮他。特别是那些从 App Store 下载了 App 用着公共服务器的人，经常发来一封只有四个字的邮件：“不能用了？” 我觉得这是一个社会常识，花一分钟写的问题，不能期待一个毫无交情的陌生人花一个小时耐心地问你版本和操作步骤，模拟出你的环境来帮你分析解决。Windows 版加上 GFWList 功能以来，我反复呼吁给 GFWList 提交规则，但是一个月过去了竟然一个提交都没有。如果没有人做一点什么，它自己是不会更新的啊，没有人会义务地帮你打理这些。最近 net-speeder 又开始流行，害人害己。我觉得，政府无限的权力，都是大部分人自己放弃的。假货坑爹，让政府审核。孩子管不好，让政府关网吧。有人在微博骂我，让政府去删。房价太高，让政府去限购。我们的文化实在太独特，创造出了家长式威权政府，GFW 正是在这种背景下产生的，一个社会矛盾的终极调和器，最终生活不能自理的你每天做的每一件事情都要给政府审查一遍，以免伤害到其他同样生活不能自理的人。这是一个零和游戏，越和这样的用户打交道，越对未来持悲观态度，觉得 GFW 可能永远也不会消失，而墙内的这个局域网看起来还似乎生机勃勃的自成一体，真是让人绝望。</p></blockquote><p>可能不只是国人吧，全人类都在以追逐利益的行动自相残杀。出了什么问题只好依靠国家管控，不要去祸害更多的人。人们无法做出不伤害别人的事情，这是人类有趣的地方，也是我讨厌人类的地方。但为何连一点点相互帮助也做不到？没有人做贡献，只会越来越糟。开源是程序界的共产主义，但没有那么多人是忠实的信徒，所以越来越有被拉垮的趋势。</p><p>如果，现在的官僚体系的思想，能与纸上描述的一模一样，我觉得我会挺支持的，不管是GWF也好什么也好。但我完全无法确定，太多的现象让人觉得是在往纸的另一面走了。</p><p>我也赞同发展实体经济，这也是说为什么要是我做完全艺术（探索自我）的工作会感觉毫无价值。哪怕能让别人感觉世界有那么一点不一样的色彩，我也是有价值的。我的他者贡献基础分值很低的喔。但就连这样我可能也做不到，也没有人在意这些事情，仅仅是不断接需求，实现别人的需求，循环、重复，维持着整个“人类社会”机器的运转。</p><p>明明人类的产能翻了几番，还是有很多人在饿肚子，人们的休息时间反而更少了，和他人交流的时间也更少了。人类社会机器就是这样，大家在不断自我优化。就像股票一样，如果是运行平稳的公司大家都不想会买，大家都喜欢买不断上升的。什么时候是极限呢，什么时候会崩溃吧，拭目以待吧。</p><p>以后要是我自己有固定房子，一定会买88键的便携电钢琴，还想弄个隔音好的小小的音乐的工作室，现在只有吉他一个乐器太难受了，人也很多，情感无处发泄。真的很期待在一个人那种创作情况下会变成什么样子，总是期待着可以完全释放自己的一天。</p><p>画画其实自己也意识到不太搭，没天赋没训练是一回事，还是太具象了，尤其商业作画的精度，离随心所欲完完全全相反。其实真的随心所欲的摸鱼……也挺爽的吧。但我内在是个话唠，总想着，要以一种方式说出来。用音乐（即便是纯音乐）也比画画顺畅很多。</p><p>也只是想想，可能是这辈子都无法实现的愿望。我会努力的。</p><h2 id="2020-11-29-晚上"><a href="#2020-11-29-晚上" class="headerlink" title="2020-11-29 晚上"></a>2020-11-29 晚上</h2><p>海鸥每年冬天飞几千公里，我却呆在一个舒适的地方不肯出去。我不如海鸥。</p><p>明明只用一步，踏出去就好了，却连这点勇气也没有</p><hr><p>中国油画院里走进去是有一栋几何上很简单的房子，简单到任何一个幼儿园的小朋友用7条直线就能惟妙惟肖地画出来。整个房体纯纯的肉色，与周围的建筑格格不入。门前有很长很长的台阶。因为独特而简单成为了网红圣地。</p><p>说网红可能有一点过了，因为它位于五环以外，附近一片荒芜，连地铁站都要走很久。我去的那天是十一，有好几对新人在拍婚纱。看到的时候就有一种奇妙的感觉。长长的阶梯加上普普通通的屋子，在摄影师的镜头下拍出了迈入宫殿的气势。简单的屋子放在这里很容易就变成了大家所认为的艺术。从古典的油画到几何抽象派，“好看”的技法与理论随着变革创新了很多很多，有时候到了普通人难以欣赏的地步。人们所说的“艺术感”大多也是不同于常规的视觉效果，是难以诼磨的东西。生活去了哪里呢？似乎一定要做出夸张、不被理解、甚至出格的事才会被称为艺术家。有的人甚至觉得艺术家都有点精神病，造就这个概念的不正是你们吗。</p><p>一些仅仅是反应生活的绘画语言，因为不够“美”而被人遗忘。若这样的人有幸被奉上艺术界的神坛，人们又开始用不同的目光欣赏它。虽然仍然无法欣赏，但，“艺术家就是不被人理解的”“看不懂很高级就对了”。嘛，也正好符合了这个概念。</p><h2 id="2020-11-27-凌晨"><a href="#2020-11-27-凌晨" class="headerlink" title="2020-11-27 凌晨"></a>2020-11-27 凌晨</h2><p>为什么这么讨厌科研不讨厌写程序。</p><p>我对于编程的认知可能不太一样。我觉得编程和做音乐、做手工、做动画没什么区别，就是用一个工具是实现一个想法。只不过这个工具是与或非的逻辑，和数理逻辑有相同的部分却是两码事，并且重点也不在有多么复杂多么先进的逻辑，而是用这个工具实现想法上，还有能不能让代码看起来美丽一些——代码是有风格的，任何编程语言都是。就像听歌的风格能反的内心世界一样。</p><p>不得不承认“想法”其实就是需求。但不喜欢需求这个词。因为这提醒着我把它当作纯艺术看总有终结的那一天。我甚至觉得，如果整天只是纯粹在实现别人的需求，那我肯定会讨厌写代码的。</p><p>INFP还是无法工作啊。</p><p>大学里面没有程序设计这个专业，毕竟现在是全员机器学习的环境。程序设计本来就应该和科研是两码事，已经用上了Design而非Study就已经足以说明问题了。学校的体系却仍然只有Study，对于Design甚至有种嗤之以鼻的态度。其实自己也明白为什么，基础的东西是更应该被重视的。正如同明明视觉传达无处不在，对整个社会有着潜移默化但无法忽视的影响。但要说做设计——不就美工嘛。插画的话就更惨了——大街上100块一张素描的？音乐是最惨的。这些都漂浮在天上，最终和人的生死没有关系。</p><p>要是真做了那么“艺术”的工作，我肯定又觉得自己的工作毫无价值。我没有对社会有任何的产出，我是靠着农民种的地、工人盖的房子活下来的。我甚至没有参与其中的任何一部分，只是在边缘不断空喊“加油加油”。如果这些加油的信号没有人接收到，那也一定是做不下去的吧。</p><p>编程挺好，至少参与了社会生产的一部分。还能保留一点点对艺术的幻想。</p><p>但如果为了这样，不得不从Design变成Study……果然我还是无法理解。和大佬聊过，逻辑上完全能够理解，但感情上无法产生一点点的共鸣。</p><p>可能和经历有关。比起“科研是对人类的贡献”这样的认知，我更觉得科研像是炫耀的工具。小时候研究生都很稀缺，“他是研究生”就像个不得了的招牌，如果给每个人的脖子上挂一张价格牌，这个文凭就是张翻倍卡。然后呢，博士就说明这个人很厉害。然后就没有然后了，没有任何一个地方让我感受到“研究是对他人的贡献”，就像是名利场，人们都习惯于自我陶醉其中，显得自己真的做了点什么事的样子。</p><p>想要毁掉一片最美好的地方，只需要往上面放金苹果就足够了。</p><p>我也无法和将我最珍视的东西踩在脚下的人和平共处。</p><p>只要条件允许，个人开服务器永远也不会有营利性质的东西或影响体验的广告。支撑我的东西很简单——他者贡献。和live上的他们一样。</p><p>这和从前拼命“让别人满意”是完全不同的。</p><hr><p>看到网上大家做食物的照片，有时候就觉得人类的对于“看起来好吃”标准真的很神奇。</p><p>一堆被剁碎的生物混杂在一起被精心烹饪过，就变成了美食。而如果是大家吃剩的菜混放在一起，就变成了潲水，谁去桶里看一眼都嫌脏，最后给猪吃得津津有味……</p><p>当然可以解释为潲水味道不好，但我认不仅如此。如果告诉你这是味道特别好的潲水你会吃吗？还是会看一眼都嫌脏吧，至少我是如此，我会觉得里面有大量不属于自己的细菌。这只是人们对仿佛属于“我的东西”的执念。</p><p>尽管中国的美食喜欢使用各种方式消毒（尤其高温消毒），但有些文化中的美食就是没有消毒需要生吃的，人类去食用食物的过程就是不断的“玷污”着食物。或者说，整个生物链大家就是靠不断的“玷污”连接在一起并以此生存。</p><p>但只有人类以如此奇怪的方式嫌弃着自己玷污过的东西。“不要扒垃圾桶啦，好寒碜啦”，整个世界的人都拼命在往上爬，想做人上人，这些事大概只有有心的街头的流浪汉才能完全明白吧。</p><h2 id="2020-11-26-晚上"><a href="#2020-11-26-晚上" class="headerlink" title="2020-11-26 晚上"></a>2020-11-26 晚上</h2><p>又开始吃一天唯一的一顿饭了。感觉再不吃就有点低血糖了。</p><p>抱了一大堆垃圾食品，还送了一大杯的爆米花，想想这个场景大概是所有人小时候都羡慕的。但也仅仅是我的自我刻奇罢了，可能有人并不羡慕呢，比如小时候的我。</p><p>进门的时候我想着，谁要是帮我扶一下门我就请他吃爆米花。但没有人扶门倒是有人关门，我抱着一大堆零食跑过去说等等，他才停下快关门的动作。好吧，其实这也是帮我扶门了，我没有请他吃爆米花是我食言了。但更重要的是大家都是行色匆匆的样子，被一个陌生人叫住“来吃爆米花吧”想想也觉得很奇怪。人们都喜欢往大城市挤，很多人住在很小的地方，很大的地方只有很少的人。然而人们住得越挤，对于左邻右舍反而越是冷漠。可能是对人司空见惯了吧，物以稀为贵，人在大城市是最不起眼的生物，这时候连一只猫都显得如此稀奇。如果在沙漠中遇到一个人那肯定可以聊上很久，还说不定可以遇到小王子。</p><h2 id="2020-11-25-下午"><a href="#2020-11-25-下午" class="headerlink" title="2020-11-25 下午"></a>2020-11-25 下午</h2><p>去看了野田洋次郎的写的日记。</p><p>可能吸引INFP的只有极端的INFP吧，认知总是有些与众不同。他在日记时描写状态，让我觉得也许我也是一个正常的人类。并且有了可能终生如此的准备。</p><p>看起来像疯子一样的想法，是极端的自我消化，实际上却是一个“因为很多年轻人在这所以我不能讲自己曾经逃课的事情”的人，和人说“好好学习”。他说他以为的理所当然被人说成极端，其实也完全没有自己想得那样“理所当然”。上面这句话也是对我自己说的。</p><p>很感谢这样的日记他愿意分享出来和发行出来，也没有被禁止。就如同五月の蝿的歌词一样，放到国内的话，一定是无法过审的吧。</p><p>我已经4天每天只吃一顿饭了。当然我也知道有的地区认为一天只吃一顿饭才是正常的，虽然我不明白为什么会是这样的认知，从医学上讲从体感上讲都应该少食多餐，也许就是文化差异吧，也正因为有这样的文化差异，我也不太担心一天一顿饭带来的问题。换作别人肯定会说“天啦，怎么一天才吃一顿”。有人这样问，是因为他会这么吃会饿；但有人这样问只是因为“大家都这么做就你不这么做”，或者是“这是生存的基本”，我实在无法理解是后者。就像说“谢谢”已经被训练成了“这是人情世故的基本”。难道不应该真的心怀感激才说“谢谢”，哪怕是一点点感激也好。许多本身源自于内心情感的事，为了表现出所谓的“道德”与“家教”，被组织成了教科书一般的语言，和正常的感激混杂在一起，我已经分辨不出我的哪一句话是真的了。</p><p>也许就是我不太对，很多该感谢别人的地方我感受不到。不管是被强塞的糖，还是被强迫的“提升自我”的事。尽管全都是大好事，可完完全全违背了自己的意愿，厌恶感远远大于需要感谢的部分。</p><p>很早之前就有被人说有生人勿近的高冷感，实际关系好的觉得我很好笑。但现在从内到外都是生人勿近。也可能是现阶段我没有关系好的现实生活中的朋友了。</p><p>记忆力不好对我而言是好事。我之前上学时很苦恼为什么自己记忆力差。不记得很多东西就会忘掉很多烦恼，也不会没事去思索“当初为什么是这样现在怎么就变成了这样”而陷入无端的思考漩涡。但以上也仅限于Se的记忆，Ni和Ne的记忆超强，就像音乐，这东西与其说是用记的不如说是直觉，如同肌肉记忆那样的东西。还常常因为缺乏Se不知道到底为什么有这样的感受。</p><hr><p>小D在和我出主意，说“不管怎样摊开说然后说我尽量写完开题报告”。其实和家里是一样的，只不过没有长幼有序的关系，听起来顺耳了很多。</p><p>而我说就算我这么说了我也没法写开题报告。我讨厌画饼和不切实际的承诺，我变得无法对自己撒谎了，不再無理にして。这是好事吧，这应该是好事吧。</p><p>但我不明白为什么会想哭。为什么哭呢，是因为我为了自己的生活能有点意义，要让别人感觉没意义了吗。明知自己的生命在万年生灵前，在别人的生命中也只是渣都不剩的蝼蚁，却还是不停想满足别人的期待。这是为什么呢。</p><p>即便，好吧，即便那个人是たいせつな人，对于双方都是，无法满足对方的愿望，是这么值得哭泣的事吗，亦或只是想避免惩罚，忘掉那些Si满满的话。毕竟我对直觉的记忆和对Se的残缺到了一无法再严重的程度，自己都不明白感受如何而来。</p><p>既然生命不过是世界中再平常不过的东西，为什么看到拉姆的事情又会流眼泪呢，为何唯独对生命的美好那么看重。巴黎圣母院也是美好的东西，被烧时也没有特别大的感触，艺术其传承不在于恢弘的美丽的宫殿里的遥不可及的挂画，宫殿里有很多代表作，但烧毁了宫殿艺术不会消失或是断层，艺术就是生活本身。即便四大古文明唯一没有历史断层的只有中国，可其他文明会因为断层影响到什么吗？当时的事只有当事人可知，生活还在继续，延续了一代又一代，不也是携带着断层的meme吗？而生命没有了，生活也就没有了。果然人类还是最看重的生命，即便知道比起世界上的所有生物来说算不上什么。自私是丑陋、邪恶的想法吗？自私只是自私，再普通不过了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;2021-05-15-凌晨&quot;&gt;&lt;a href=&quot;#2021-05-15-凌晨&quot; class=&quot;headerlink&quot; title=&quot;2021-05-15 凌晨&quot;&gt;&lt;/a&gt;2021-05-15 凌晨&lt;/h2&gt;&lt;p&gt;说真的， 最近就是间歇性的，没有兴趣。&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    <category term="Diary" scheme="https://sansui233.github.io/categories/Diary/"/>
    
    
    <category term="生活" scheme="https://sansui233.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
</feed>
